{
  "name": "asyncjs",
  "description": "async.js it for the node fs module, what jQuery is for the DOM",
  "version": "0.0.9",
  "homepage": "http://github.com/fjakobs/async.js",
  "engines": {
    "node": ">= 0.4.0"
  },
  "author": {
    "name": "Fabian Jakobs",
    "email": "fabian.jakobs@web.de"
  },
  "scripts": {
    "test": "node test/all.js"
  },
  "main": "index",
  "repository": {
    "type": "git",
    "url": "http://github.com/fjakobs/async.js.git"
  },
  "licenses": [
    {
      "type": "The MIT License",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "gitHead": "1cdd7779454c79e5901d330facabb776073e4073",
  "readme": "async.js\r\n========\r\n\r\n**A clean, composable way to manipulate sequences of values with asynchronous functions\r\n**\r\n\r\nDealing with control flow in heavily asynchronous code can be a big challange. Without any helper functions the code can easily degenerate into a christmas tree shape because of the callback of a callback of a callback syndrome.\r\n\r\n```js\r\n    asncFunction1(function(err, result) {\r\n        asncFunction2(function(err, result) {\r\n            asncFunction3(function(err, result) {\r\n                asncFunction4(function(err, result) {\r\n                    asncFunction5(function(err, result) {\r\n                        // do something useful\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    })\r\n```    \r\n\r\nWith async.js this can be written as\r\n```js\r\n    async.list([\r\n        asncFunction1,\r\n        asncFunction2,\r\n        asncFunction3,\r\n        asncFunction4,\r\n        asncFunction5,\r\n    ]).call().end(function(err, result) {\r\n        // do something useful\r\n    });\r\n```\r\nIt gets even worse if an asynchronous function has to be applied to a sequence of values. There is a nice example of this in the  howtonode.org article [Control Flow in Node Part III](http://howtonode.org/control-flow-part-iii):\r\n```js\r\n    // Here is the async version without helpers\r\n    function loaddir(path, callback) {\r\n      fs.readdir(path, function (err, filenames) {\r\n        if (err) { callback(err); return; }\r\n        var realfiles = [];\r\n        var count = filenames.length;\r\n        filenames.forEach(function (filename) {\r\n          fs.stat(filename, function (err, stat) {\r\n            if (err) { callback(err); return; }\r\n            if (stat.isFile()) {\r\n              realfiles.push(filename);\r\n            }\r\n            count--;\r\n            if (count === 0) {\r\n              var results = [];\r\n              realfiles.forEach(function (filename) {\r\n                fs.readFile(filename, function (err, data) {\r\n                  if (err) { callback(err); return; }\r\n                  results.push(data);\r\n                  if (results.length === realfiles.length) {\r\n                    callback(null, results);\r\n                  };\r\n                });\r\n              });\r\n            }\r\n          });\r\n        });\r\n      });\r\n    }\r\n```    \r\nThis code reads the contents of a directory, filters out all directory and returns the contens of all files as an array. Without any helpers the whole control flow management totally obscures the intent of the code. With async.js it is possible to move the control flow aspects of the code out of the function and rewrite it like this:\r\n```js\r\n    function loaddir(path, callback) {\r\n        async.readdir(\".\")\r\n            .stat()\r\n            .filter(function(file) {\r\n                return file.stat.isFile()\r\n            })\r\n            .readFile(\"utf8\")\r\n            .filter(function(file) {\r\n                return file.data\r\n            })\r\n            .toString(callback)\r\n    }\r\n```    \r\n\r\nFeatures\r\n========\r\n\r\nCore\r\n----\r\n\r\nJavaScript Array like abstraction, which supports almost all JavaScript array functions with asynchronous versions of\r\n\r\n- filter\r\n- map\r\n- reduce\r\n- forEach\r\n- some\r\n- every\r\n\r\nAll functions are chainable.\r\n\r\nnode.js file system plugin\r\n--------------------------\r\n\r\nMost of the functions from the `fs` module in node.js are exposed as chainable filters.\r\n\r\n- `stat` (lstat, fstat)\r\n- `unlink`\r\n- `mkdir`/`rmdir`\r\n- `realpath`\r\n- `open`/`close`\r\n- `exists` (from `fs.exists`)\r\n- `chmod`\r\n- `readFile`/`writeFile`\r\n\r\nConstructors\r\n\r\n- `files`: convert a list of files into a file sequence\r\n- `readdir`: create a file sequence from the files in a directory\r\n- `walkfiles`: recursive file walker\r\n- `glob`: Unix style file matching. Creates a file sequence of all matching files.\r\n\r\nUtility functions to work with the file system\r\n\r\n- `abspath`: convert a relative to an absolute path\r\n- `copyfile`: copy a single file\r\n- `copytree`: copy whole diroctory tree\r\n- `rmtree`: remove whole direcory tree (like `rm -rf`)\r\n\r\nUtils plugin\r\n------------\r\n\r\nGeneric filters:\r\n\r\n- `delay`: wait a given time before returning the next value\r\n- `timeout`: If the source doesn't respond in a given time an error is returned.\r\n- `inspect`: print the source value as JSON\r\n- `print`: print the source value as string\r\n\r\nHow does it work?\r\n=================\r\n\r\n## Constructors\r\n\r\nConstructors are the sources of async streams. They return an `async.Generator` instance which generates a sequence of values.\r\n\r\n## Filters\r\n\r\nFilters work on the sequence generated by a source generator. They can remove, add and modify values in the sequence. Filters return themselves generator instances.\r\n\r\n## Drivers\r\n\r\nDriver methods drive the actual execution of the iteration. The hole system is based on the principle of pulling the values from the end. Until any of the drivers is called no value will be generated.\r\n\r\n\r\nTODO\r\n====\r\n\r\n- Add documentation about the fs plugin\r\n- Add documentation about the unit testing framework\r\n- improve test coverage of the core functionality\r\n- create browser version\r\n\r\nContinuous Integration status\r\n-----------------------------\r\n\r\nThis project is tested with [Travis CI](http://travis-ci.org)\r\n[![Build Status](https://secure.travis-ci.org/fjakobs/async.js.png)](http://travis-ci.org/fjakobs/async.js)\r\n\r\nCore API\r\n========\r\n\r\n## Constructors\r\n\r\n### async.range([start=0], [stop], [step=1], [construct=async.Generator])\r\n\r\nCreates a generator generating an arithmetic progression of integers.\r\n`range(i, j)` returns [i, i+1, i+2, ..., j-1] and `start` defaults to 0.\r\nWhen step is given, it specifies the increment (or decrement). If `stop` is not given an infinite number of values if generated. This generates all positive odd numbers:\r\n```js\r\n    async.range(1, null, 2)\r\n```\r\nThe optional `construct` argument must be a sub class of `async.Generator` and can be used to tell the function to return instances of the class.\r\n\r\n\r\n### async.list(arr, [construct=async.Generator])\r\n\r\nCreates a generator, which returns the elements of the given array. This generates e.g. the values `1`, `2` and `3`:\r\n```js\r\n    async.list([1, 2, 3])\r\n```\r\nThe optional `construct` argument must be a sub class of `async.Generator` and can be used to tell the function to return instances of the class.\r\n\r\n\r\n## async.Generator(source)\r\n\r\nGenerators are implementing the 'Iterator' design pattern in an asynchronous way. It has a `next(callback)` method, which passes on each call the next generated value to the given callback. Generators can be chained and all construcors and filters return new `Generator` instances.\r\n\r\nThe `source` is either another `async.Generator` or a generator function. All filters in the generator operate on the values generated by the source.\r\n```js\r\n    var i=0;\r\n    var gen = new async.Generator(function(callback) {\r\n        if (i>4)\r\n            callback(async.STOP)\r\n        else\r\n            callback(null, i++) // no error\r\n    })\r\n```    \r\n`gen` in this example generates the sequence [0, 1, 2, 3, 4]. The first argument of the callback can be used to indicate an error the the end of the iteration, whicle the second argument is the generated value.\r\n\r\n### Constant: async.STOP\r\n\r\nSpecial error value, which indicates the end of the iteration.\r\n\r\n### Method: next(callback)\r\n\r\nCalls the callback with the next generated value:\r\n```js\r\n    gen.next(function(err, value) {\r\n        //\r\n    })\r\n```    \r\nThe generated value is passed in the `value` argument. If an error occured while computing the value the `err` argument is set. In this case value the meaning of value is undefined. `async.STOP` can be passed as special error value to indicate the end of the iteration.\r\n\r\nUsually this method is only needed to write custom filters.\r\n\r\n### Filter: map(mapper)\r\n\r\nApplies the `mapper` function to all values of the generator's source and generates the result of the mapping.\r\n```js\r\n    async.range(0, 3)\r\n        .map(function(item, next) {\r\n            next(null, item + 1)\r\n        })\r\n```    \r\nThis will add one to each incoming item and thus generate the sequence [1, 2, 3].\r\n\r\nThe mapper can also be synchronous and simply return the result. In this case the mapper must not have the `next` argument.\r\n\r\n\r\n### Filter: filter(filter)\r\n\r\nCalls filter for each of the generator's source values. If the `filter` returns `false` for a passed value, the value is dropped from the sequence, otherwise the value is forwarded.\r\n```js\r\n    async.list([1, 2, 3, 4])\r\n        .filter(function(item, next) {\r\n            next(null, item % 2 == 0)\r\n        })\r\n```        \r\nThis will filter out all odd values and generate the sequence [2, 4].\r\n\r\n\r\n### Filter: slice(begin, end)\r\n\r\nCounts the generator's source values starting with 0 and skips all values with an index smaller then `begin`. If the index is >= `end` the sequence is stopped.\r\n```js\r\n    async.range(0)\r\n        .slice(1, 4)\r\n```        \r\nThe `async.range` call generates an infinite sequence of all integers and the `slice` call transforms this into the sequence [1, 2, 3] by dropping the first value and stopping the sequence after the 4th value.\r\n\r\n### Filter: reduce(reduce, [initialValue])\r\n\r\nSum up the number from 1 to 5:\r\n```js\r\n    async.range(1, 5)\r\n        .reduce(function(previousValue, currentValue) {        \r\n            return previousValue + currentValue;\r\n        })\r\n```        \r\nSum up the number from 1 to 5 but with a first 'initialValue' of 10:\r\n```js\r\n    async.range(1, 5)\r\n        .reduce(function(previousValue, currentValue, index, next) {\r\n            next(null, previousValue + currentValue);\r\n        }, 10)\r\n```\r\n\r\n### Filter: forEach(fn)\r\n\r\nAlias for `each`.\r\n\r\n### Filter: each(fn)\r\n\r\nCalls `fn` for each of the source generator's values. The returned generator passes on the source values.\r\n```js\r\n    async.range(1, 10)\r\n        .each(function(item, next) {\r\n            console.log(item);\r\n        })\r\n```        \r\nPrints the numbers from 1 to 9. Otherwise the source sequence is not changed.\r\n\r\n### Filter: some(condition)\r\n\r\nCheck if any of the values in the source sequence match the condition (i.e. the `condition` callback returns true). The returned generator generates a one elmement sequence, which contains the boolean value of the result.\r\n\r\nCheck if the source generates an even number:\r\n```js\r\n    async.list([1, 8, 3, 5])\r\n        .some(function odd(item) {\r\n            return item % 2 == 0\r\n        })\r\n```\r\nThis generates [true].\r\n\r\n### Filter: every(condition)\r\n\r\nCheck if all of the values in the source sequence match the condition (i.e. the `condition` callback returns true). The returned generator generates a one elmement sequence, which contains the boolean value of the result.\r\n\r\nCheck if the source generates only even numbers:\r\n```js\r\n    async.list([1, 8, 3, 5])\r\n        .every(function odd(item) {\r\n            return item % 2 == 0\r\n        })\r\n```\r\nThis returns [false]\r\n\r\n### Filter: call([context])\r\n\r\nCalls each of source values in sequence, which have to be functions. The functions can either be synchronous and return a value of be asynchronous and call the passed callback on completion. The generated sequence are the function's return values. The optional `context` argument defines the `this` context of the called functions.\r\n```js\r\n    async.list([\r\n        function sync() {\r\n            return \"juhu\"\r\n        },    \r\n        function async(next) {\r\n            next(null, \"kinners\")\r\n        }\r\n    ]).call()\r\n```    \r\nThis calls the two functions in sequence and generates the sequence [\"juhu\", \"kinners\"].\r\n\r\n### Filter: concat(...)\r\n\r\nConcatenates a variable number of generators with this generator. \r\n```js\r\n    async.range(1, 4)\r\n        .concat(async.range(10, 13))\r\n```        \r\nThis returns a generator, which generates the values of the first `range` followed by the values of the second `range`: [1, 2, 3, 10, 11, 12]\r\n\r\n\r\n### Filter: zip(...)\r\n\r\nReturns a generator, which generates on each `next()` an arroy of the next values of this generator and each of the passed arguments. The length of the generated sequence is truncated to the lenght of the shortest input sequence. This function expects a variable list of generators as arguments.\r\n```js\r\n    async.range(1, 4)\r\n        .zip(async.range(10, 14))\r\n```        \r\nThis will generate [[1, 10], [2, 11], [3, 13]]\r\n\r\n### Filter: sort([compare])\r\n\r\nPerforms an Array.prototype.sort on the source values and returns a generator, which generates the result as one element sequence. Since this requires reading all source elements, the source must not generate an infinite number of values. Generates the read values in sorted order.\r\n```js\r\n    async.list([4, 2, 3, 9])\r\n        .sort()\r\n```\r\nThis generates the sequence [2, 3, 4, 9]\r\n\r\n### Filter: join([separator])\r\n\r\nPerforms an Array.prototype.join on the source values and returns a generator, which generates the result as one element sequence. Since this requires reading all source elements, the source must not generate an infinite number of values.\r\n```js\r\n    async.list([1, 4, 5])\r\n        .join(\" - \")\r\n```\r\nThis will generate [\"1 - 4 - 5\"]\r\n\r\n### Filter: reverse()\r\n\r\nReverses the elements generated by the generator's source. Since this requires reading all source elements, the source must not generate an infinite number of values.\r\n```js\r\nasync.list([1, 4, 5])\r\n    .revers()\r\n```\r\nThis will generate [5, 4, 1]\r\n\r\n\r\n### Driver: end([callback])\r\n\r\nPerform the iteration until the generator's source either returns `async.STOP` or indicates an error. The value of the last generated value is passed to the callback.\r\n\r\n```js\r\n    async.list([1, 8, 3, 5])\r\n        .every(function odd(item) {\r\n            return item % 2 == 0\r\n        })\r\n        .end(function(err, allEven) {\r\n            console.log(\"All values are even: \" + allEven)\r\n        }) \r\n```\r\nThis will print the last generated value (the result of `very`) on the console.\r\n\r\n### Driver: toArray([breakOnError=true], callback)\r\n\r\nPerform the iteration until the generator's source either returns `async.STOP`. If `breakOnError` is true the iteration is stopped on the first error. Otherwise the iteration continues and all errors are collected in an error array. An array of all generated values is passed to the callback.\r\n```js\r\n    async.list([1, 8, 3, 5])\r\n        .map(function odd(item, next) {\r\n            next(err, item * 10)\r\n        })\r\n        .toArray(function(err, values) {\r\n            console.log(values)\r\n        }) \r\n```\r\nThe last callback will be called with arr set to [10, 80, 30, 50].\r\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/fjakobs/async.js/issues"
  },
  "_id": "asyncjs@0.0.9",
  "_shasum": "c32ed81bacb60a5f57f5065c19e335cad81b0f2b",
  "_from": "git://github.com/fjakobs/async.js.git#1cdd7779454c79e5901d330facabb776073e4073",
  "_resolved": "git://github.com/fjakobs/async.js.git#1cdd7779454c79e5901d330facabb776073e4073",
  "_fromGithub": true
}
